{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "subject@to.change"
    },
    "description": "Package foundation represents default Ottemo e-commerce product application entry point.",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://github.com/ottemo/foundation/blob/master/LICENSE.md"
    },
    "termsOfService": "http://subject.to.change",
    "title": "Ottemo Foundation API",
    "version": "1.4.2"
  },
  "host": "localhost:3000",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/app/email": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "email": {
                  "type": "string"
                },
                "formLocation": {
                  "description": "Web page(?) where form is located",
                  "type": "string"
                }
              },
              "required": [
                "formLocation"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "app"
        ],
        "description": "creates a new email message via a POST from the Contact Us form"
      }
    },
    "/app/location": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "app"
        ],
        "description": "return a time zone of session"
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "One of parameters should be set",
              "properties": {
                "time": {
                  "type": "string"
                },
                "timeZone": {
                  "type": "string"
                },
                "time_zone": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "app"
        ],
        "description": "validate time zone and set it to session"
      }
    },
    "/app/login": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "login",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "login application with root rights"
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "login": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "login application with root rights"
      }
    },
    "/app/logout": {
      "get": {
        "responses": {
          "200": {
            "description": "processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "logout application - session data clear"
      }
    },
    "/app/rights": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "properties": {
                    "is_admin": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "app"
        ],
        "description": "function to get info about current rights"
      }
    },
    "/app/status": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "GO": {
                      "type": "string"
                    },
                    "NumCPU": {
                      "type": "integer"
                    },
                    "NumGoroutine": {
                      "type": "integer"
                    },
                    "Ottemo": {
                      "type": "string"
                    },
                    "Ottemo.BuildBranch": {
                      "type": "string"
                    },
                    "Ottemo.BuildDate": {
                      "type": "string"
                    },
                    "Ottemo.BuildHash": {
                      "type": "string"
                    },
                    "Ottemo.BuildNumber": {
                      "type": "string"
                    },
                    "Ottemo.BuildTags": {
                      "type": "string"
                    },
                    "Ottemo.DBConnected": {
                      "type": "string"
                    },
                    "Ottemo.DBEngine": {
                      "type": "string"
                    },
                    "Ottemo.DBName": {
                      "type": "string"
                    },
                    "Ottemo.VersionMajor": {
                      "type": "integer"
                    },
                    "Ottemo.VersionMinor": {
                      "type": "integer"
                    },
                    "StartTime": {
                      "type": "string"
                    },
                    "Uptime": {
                      "type": "integer"
                    },
                    "memStats.Alloc": {
                      "type": "integer"
                    },
                    "memStats.BuckHashSys": {
                      "type": "integer"
                    },
                    "memStats.DebugGC": {
                      "type": "boolean"
                    },
                    "memStats.EnableGC": {
                      "type": "boolean"
                    },
                    "memStats.Frees": {
                      "type": "integer"
                    },
                    "memStats.GCSys": {
                      "type": "integer"
                    },
                    "memStats.HeapAlloc": {
                      "type": "integer"
                    },
                    "memStats.HeapIdle": {
                      "type": "integer"
                    },
                    "memStats.HeapInuse": {
                      "type": "integer"
                    },
                    "memStats.HeapObjects": {
                      "type": "integer"
                    },
                    "memStats.HeapReleased": {
                      "type": "integer"
                    },
                    "memStats.HeapSys": {
                      "type": "integer"
                    },
                    "memStats.LastGC": {
                      "type": "integer"
                    },
                    "memStats.Lookups": {
                      "type": "integer"
                    },
                    "memStats.MCacheInuse": {
                      "type": "integer"
                    },
                    "memStats.MCacheSys": {
                      "type": "integer"
                    },
                    "memStats.MSpanInuse": {
                      "type": "integer"
                    },
                    "memStats.MSpanSys": {
                      "type": "integer"
                    },
                    "memStats.Mallocs": {
                      "type": "integer"
                    },
                    "memStats.NextGC": {
                      "type": "integer"
                    },
                    "memStats.NumGC": {
                      "type": "integer"
                    },
                    "memStats.OtherSys": {
                      "type": "integer"
                    },
                    "memStats.PauseTotalNs": {
                      "type": "integer"
                    },
                    "memStats.StackInuse": {
                      "type": "integer"
                    },
                    "memStats.StackSys": {
                      "type": "integer"
                    },
                    "memStats.Sys": {
                      "type": "integer"
                    },
                    "memStats.TotalAlloc": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "app"
        ],
        "description": "function to get info about current application status"
      }
    },
    "/authorizenet/receipt": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "x_account_number": {
                  "type": "string"
                },
                "x_amount": {
                  "type": "string"
                },
                "x_card_type": {
                  "type": "string"
                },
                "x_response_code": {
                  "type": "string"
                },
                "x_session": {
                  "type": "string"
                },
                "x_trans_id": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed. Positive result could contains:\n  - DeclineHTML\n  - StructRestRedirect:\n    - Result: object\n    - Location: redirectURL\n    - DoRedirect: boolean\n",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "authorizenet",
          "payment"
        ],
        "description": "processes Authorize.net receipt response can be used for redirecting customer to it on exit from authorize.net\n"
      }
    },
    "/authorizenet/relay": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "x_account_number": {
                  "type": "string"
                },
                "x_amount": {
                  "type": "string"
                },
                "x_card_type": {
                  "type": "string"
                },
                "x_response_code": {
                  "type": "string"
                },
                "x_session": {
                  "type": "string"
                },
                "x_trans_id": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed. Positive result could contains:\n  - DeclineHTML\n  - ReceiptHTML\n",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "authorizenet",
          "payment"
        ],
        "description": "processes Authorize.net relay response"
      }
    },
    "/blog/post": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/BlogPostModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/BlogPostModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "blog"
        ],
        "description": "creates blog post by provided data"
      }
    },
    "/blog/post/{id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "blog"
        ],
        "description": "deletes post by id"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/BlogPostModelHash"
                        },
                        {
                          "properties": {
                            "extra": {
                              "properties": {
                                "next": {
                                  "$ref": "#/definitions/BlogPostModelHash"
                                },
                                "prev": {
                                  "$ref": "#/definitions/BlogPostModelHash"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "blog"
        ],
        "description": "returns post by id"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlogPostModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/BlogPostModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "blog"
        ],
        "description": "updates post by id"
      }
    },
    "/blog/posts": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed. Could return:\n  - list of BlogPostModelHash\n  - count\n",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "blog"
        ],
        "description": "returns list of posts or count"
      }
    },
    "/blog/posts/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "blog"
        ],
        "description": "returns a list of blog post attributes"
      }
    },
    "/cart": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "cart_info": {
                          "type": "object"
                        },
                        "items": {
                          "items": {
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "gty": {
                                "type": "integer"
                              },
                              "idx": {
                                "type": "integer"
                              },
                              "options": {
                                "type": "object"
                              },
                              "pid": {
                                "type": "string"
                              },
                              "product": {
                                "properties": {
                                  "image": {
                                    "type": "object"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "options": {
                                    "type": "object"
                                  },
                                  "price": {
                                    "type": "number"
                                  },
                                  "sku": {
                                    "type": "string"
                                  },
                                  "weight": {
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "visitor_id": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cart"
        ],
        "description": "returns get cart related information"
      }
    },
    "/cart/coupons": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                }
              },
              "required": [
                "code"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon applied",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "cart",
          "coupon"
        ],
        "description": "Apply will add the coupon code to the current checkout"
      }
    },
    "/cart/coupons/{code}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "cart",
          "coupon"
        ],
        "description": "will remove the coupon code and its value from the current checkout. use a \"*\" as the coupon code to revert all discounts.\n"
      }
    },
    "/cart/giftcards/{giftcode}": {
      "delete": {
        "parameters": [
          {
            "description": "use \"*\" as giftcard code to 'remove' all giftcard discounts",
            "in": "path",
            "name": "giftcode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "giftcard"
        ],
        "description": "removes the application of the gift card value from the current checkout"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "giftcode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "giftcard"
        ],
        "description": "applies the provided gift card to current checkout"
      }
    },
    "/cart/item": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "options": {
                  "type": "object"
                },
                "pid": {
                  "description": "product ID",
                  "type": "string"
                },
                "qty": {
                  "type": "integer"
                }
              },
              "required": [
                "pid"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "cart"
        ],
        "description": "adds specified product to cart"
      }
    },
    "/cart/item/{itemIdx}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "itemIdx",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "cart"
        ],
        "description": "removes specified item from cart item from cart"
      }
    },
    "/cart/item/{itemIdx}/{qty}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "itemIdx",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "qty",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "cart"
        ],
        "description": "changes qty and/or option for cart item"
      }
    },
    "/categories": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed. Could return:\n  - list of items\n  - count\n",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "Desc": {
                            "type": "string"
                          },
                          "Extra": {
                            "type": "string"
                          },
                          "ID": {
                            "type": "string"
                          },
                          "Image": {
                            "type": "string"
                          },
                          "Images": {
                            "items": {
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "Name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "returns a list of available categories"
      }
    },
    "/categories/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "returns a list of category attributes"
      }
    },
    "/categories/tree": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "child": {
                            "items": {
                              "description": "id, name, child[...]",
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "returns categories parent/child relation map"
      }
    },
    "/category": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CategoryModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CategoryModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "category"
        ],
        "description": "creates a new category"
      }
    },
    "/category/{categoryID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "category"
        ],
        "description": "deletes existing category"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CategoryModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "return specified category information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CategoryModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CategoryModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "category"
        ],
        "description": "modifies existing category"
      }
    },
    "/category/{categoryID}/layers": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "description": "each property value is an array",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "enumerates category attributes and their possible values which is used for layered navigation"
      }
    },
    "/category/{categoryID}/media/{mediaType}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "returns list of media files assigned to specified category"
      }
    },
    "/category/{categoryID}/media/{mediaType}/{mediaName}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "category"
        ],
        "description": "removes media content from specified category"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed. On success case not a JSON data returns, but media file.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "returns media contents for a category (file assigned to a category)"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "category"
        ],
        "description": "uploads and assigns media file send in request for a specified category"
      }
    },
    "/category/{categoryID}/mediapath/{mediaType}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "returns relative path to category media files within media library",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "returns relative path to category media files within media library"
      }
    },
    "/category/{categoryID}/product/{productID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "category"
        ],
        "description": "adds product to category"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "category"
        ],
        "description": "removes product from category"
      }
    },
    "/category/{categoryID}/products": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "categoryID",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/ProductModelHash"
                          },
                          {
                            "properties": {
                              "image": {
                                "items": {
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "category"
        ],
        "description": "returns category related products"
      }
    },
    "/checkout": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "info": {
                      "type": "object"
                    },
                    "billing_address": {
                      "$ref": "#/definitions/AddressModelHash"
                    },
                    "discount_amount": {
                      "type": "number"
                    },
                    "discounts": {
                      "items": {
                        "$ref": "#/definitions/StructPriceAdjustment"
                      },
                      "type": "array"
                    },
                    "grandtotal": {
                      "type": "number"
                    },
                    "payment_method_code": {
                      "type": "string"
                    },
                    "payment_method_name": {
                      "type": "string"
                    },
                    "shipping_address": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/AddressModelHash"
                        },
                        {
                          "properties": {
                            "notes": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    },
                    "shipping_amount": {
                      "type": "number"
                    },
                    "shipping_method_code": {
                      "type": "string"
                    },
                    "shipping_method_name": {
                      "type": "string"
                    },
                    "shipping_rate": {
                      "$ref": "#/definitions/StructShippingRate"
                    },
                    "subtotal": {
                      "type": "number"
                    },
                    "tax_amount": {
                      "type": "number"
                    },
                    "taxes": {
                      "items": {
                        "$ref": "#/definitions/StructPriceAdjustment"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "returns information related to current checkkout"
      },
      "put": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "allows to specify and assign to checkout extra information"
      }
    },
    "/checkout/billing/address": {
      "put": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddressModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AddressModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "specifies billing address for a current checkout"
      }
    },
    "/checkout/payment/method/{method}": {
      "put": {
        "parameters": [
          {
            "description": "payment methos Code",
            "in": "path",
            "name": "method",
            "required": true,
            "type": "string"
          },
          {
            "description": "checkout Info",
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "assigns payment method to current checkout"
      }
    },
    "/checkout/payment/methods": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "Code": {
                            "type": "string"
                          },
                          "Name": {
                            "type": "string"
                          },
                          "Tokenable": {
                            "type": "boolean"
                          },
                          "Type": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "returns currently available payment methods"
      }
    },
    "/checkout/shipping/address": {
      "put": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/AddressModelHash"
                },
                {
                  "properties": {
                    "notes": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AddressModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "specifies shipping address for a current checkout"
      }
    },
    "/checkout/shipping/method/{method}/{rate}": {
      "put": {
        "parameters": [
          {
            "description": "shipping method Code",
            "in": "path",
            "name": "method",
            "required": true,
            "type": "string"
          },
          {
            "description": "shipping rate Code",
            "in": "path",
            "name": "rate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "assigns shipping method and shipping rate to current checkout"
      }
    },
    "/checkout/shipping/methods": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "Code": {
                            "type": "string"
                          },
                          "Name": {
                            "type": "string"
                          },
                          "Rates": {
                            "items": {
                              "$ref": "#/definitions/StructShippingRate"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "returns currently available shipping methods"
      }
    },
    "/checkout/submit": {
      "post": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "checkout"
        ],
        "description": "Submits current checkout and creates a new order base on it. Could return:\n  - StructRestRedirect\n  - OrderHashMap with orderItems\n"
      }
    },
    "/cms/block": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CmsBlockModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CmsBlockModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "creates a new CMS block"
      }
    },
    "/cms/block/{blockID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "blockID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "deletes existing CMS block"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "blockID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CmsBlockModelHash"
                        },
                        {
                          "properties": {
                            "evaluated": {
                              "description": "CMS block content can be a text template, so \"evaluated\" field in response is that template evaluation result\n",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cms"
        ],
        "description": "return specified CMS block information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "blockID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CmsBlockModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CmsBlockModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "updates existing CMS block"
      }
    },
    "/cms/blocks": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cms"
        ],
        "description": "returns a list of existing CMS blocks"
      }
    },
    "/cms/blocks/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cms"
        ],
        "description": "returns a list of CMS block attributes"
      }
    },
    "/cms/media": {
      "get": {
        "parameters": [
          {
            "description": "- if mediaType is empty - all types will be used - if mediaType is explicit value - only this value will be used - if mediaType is list of types separated by comma - only these types will be shown\n",
            "in": "query",
            "name": "mediaType",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "created_at": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cms"
        ],
        "description": "returns list of media files from media"
      },
      "post": {
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "uploads images to the media - media file should be provided in \"file\" field with full name - the mediaType of files are detected automatically\n"
      }
    },
    "/cms/media/{mediaName}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "removes media from storage"
      }
    },
    "/cms/media/{mediaName}/{mediaType}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "removes media from storage"
      }
    },
    "/cms/page": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CmsPageModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CmsPageModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "creates a new CMS block"
      }
    },
    "/cms/page/{pageID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "pageID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "deletes specified CMS page"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "pageID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/CmsPageModelHash"
                        },
                        {
                          "properties": {
                            "evaluated": {
                              "description": "CMS page content can be a text template, so \"evaluated\" field in response is that template evaluation result\n",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cms"
        ],
        "description": "return specified CMS page information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "pageID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CmsPageModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CmsPageModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cms"
        ],
        "description": "updates existing CMS page"
      }
    },
    "/cms/pages": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cms"
        ],
        "description": "returns a list of existing CMS pages - if \"action\" parameter is set to \"count\" result value will be just a number of list items\n"
      }
    },
    "/cms/pages/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "cms"
        ],
        "description": "returns a list of CMS page attributes"
      }
    },
    "/config/groups": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructConfigItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "API to get value information about config items with type [ConstConfigTypeGroup]"
      }
    },
    "/config/item/{path}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructConfigItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "config"
        ],
        "description": "API to get value information about item(s) matching path"
      }
    },
    "/config/value/{path}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "config"
        ],
        "description": "API used to remove config item from system"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "config"
        ],
        "description": "API used to get value of particular item in config - path should be without any wildcard\n"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StructConfigItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructConfigItem"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "config"
        ],
        "description": "API used to add new config Item to a config system"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "value": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "config"
        ],
        "description": "API used to set value of particular item in config - path should be without any wildcard\n"
      }
    },
    "/config/values": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "config"
        ],
        "description": "API to get value information about config items with type [ConstConfigTypeGroup]"
      }
    },
    "/config/values/refresh": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "config"
        ],
        "description": "API used to re-load config from DB"
      }
    },
    "/coupons": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "coupon"
        ],
        "description": "returns a list registered coupons and is an protected resource that requires authentication to access."
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CouponHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CouponHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "coupon"
        ],
        "description": "will generate a new coupon code when supplied the following required keys, they are not required to match.\n  - \"name\" is the desired reference key for the coupon\n  - \"code\" is the text visitors must enter to apply a coupon in checkout\n"
      }
    },
    "/coupons/{id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "coupon"
        ],
        "description": "deletes specified coupon item"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CouponHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "coupon"
        ],
        "description": "returns a coupon with the specified ID"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CouponHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CouponHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "coupon"
        ],
        "description": "updates existing coupon specified in the request argument"
      }
    },
    "/cron/schedule": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/CronScheduleHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cron"
        ],
        "description": "get information about current schedules"
      }
    },
    "/cron/task": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cron"
        ],
        "description": "return scheduler registered tasks (functions that are available to execute)"
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "CronExpr": {
                  "type": "string"
                },
                "TaskName": {
                  "type": "string"
                },
                "Time": {
                  "type": "string"
                },
                "params": {
                  "type": "object"
                },
                "repeat": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CronSchedule"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cron"
        ],
        "description": "createTask with request params; in request params required are time or cronExpr for creating different type of tasks\n"
      }
    },
    "/cron/task/disable/{taskIndex}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "taskIndex",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CronScheduleHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cron"
        ],
        "description": "make schedule inactive"
      }
    },
    "/cron/task/enable/{taskIndex}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "taskIndex",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/CronScheduleHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cron"
        ],
        "description": "make schedule active"
      }
    },
    "/cron/task/run/{taskIndex}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "taskIndex",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "useTaskParams": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cron"
        ],
        "description": "allows to execute task of schedule without updating of it"
      }
    },
    "/cron/task/{taskIndex}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "taskIndex",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "expr": {
                  "type": "string"
                },
                "params": {
                  "type": "object"
                },
                "repeat": {
                  "type": "string"
                },
                "task": {
                  "type": "string"
                },
                "time": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "cron"
        ],
        "description": "updateTask update scheduler task"
      }
    },
    "/csv/coupons": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "coupon",
          "csv"
        ],
        "description": "returns a csv file with the current coupons and their configuration"
      },
      "post": {
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "coupon",
          "csv"
        ],
        "description": "will overwrite and replace the current coupon configuration with the uploaded CSV"
      }
    },
    "/emma/contact": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                },
                "group_ids": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "emma"
        ],
        "description": "return message, after add contact"
      }
    },
    "/friend/captcha": {
      "get": {
        "parameters": [
          {
            "description": "will return image as base64 in result:{captcha}",
            "in": "query",
            "name": "json",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "friendmail"
        ],
        "description": "will generate a captcha for use in a form"
      }
    },
    "/friend/email": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "captcha": {
                  "type": "string"
                },
                "friend_email": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "friendmail"
        ],
        "description": "sends an email to a friend"
      }
    },
    "/giftcard": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "amount": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "delivery_date": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "recipient_mailbox": {
                  "type": "string"
                },
                "sku": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "giftcard"
        ],
        "description": "send giftcard by admin"
      }
    },
    "/giftcard/{id}/history": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "amount": {
                            "type": "number"
                          },
                          "order_id": {
                            "type": "string"
                          },
                          "transaction_date": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "giftcard"
        ],
        "description": "returns a history of gift cards for the admin in the context passed"
      }
    },
    "/giftcards": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "giftcard"
        ],
        "description": "returns a list of gift cards for the visitor id in the context passed"
      }
    },
    "/giftcards/{giftcode}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "giftcode",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "giftcard"
        ],
        "description": "returns the gift card and related info"
      }
    },
    "/impex/export/{model}": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "model",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "import",
          "export",
          "impex"
        ],
        "description": "API used export specific model data from system"
      }
    },
    "/impex/import": {
      "post": {
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "import",
          "export",
          "impex"
        ],
        "description": "API used to process csv file script in impex format"
      }
    },
    "/impex/import/status": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "position": {
                          "type": "integer"
                        },
                        "size": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "import",
          "export",
          "impex"
        ],
        "description": "API for getting status of current import"
      }
    },
    "/impex/import/{model}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "model",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "import",
          "export",
          "impex"
        ],
        "description": "API used import data to system"
      }
    },
    "/impex/models": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "import",
          "export",
          "impex"
        ],
        "description": "API used to list available models for Impex system"
      }
    },
    "/impex/test/import": {
      "post": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "import",
          "export",
          "impex"
        ],
        "description": "API used to test csv file before import"
      }
    },
    "/impex/test/mapping": {
      "post": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "import",
          "export",
          "impex"
        ],
        "description": "API to test conversion from csv to json / map[string]interface{}"
      }
    },
    "/media": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "resizeAll",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "media"
        ],
        "description": "will resize all images if the params of the request contain 'resizeAll' with a value of true"
      }
    },
    "/order/{orderID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "deletes existing purchase order"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OrderModelHash"
                        },
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "$ref": "#/definitions/OrderItem"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "return specified purchase order information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/OrderModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/OrderModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "update existing purchase order"
      }
    },
    "/order/{orderID}/emailOrderConfirmation": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "500": {
            "description": "Internal Server Errror"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "will send out an order confirmation email to the visitor specficied in the orderID"
      }
    },
    "/order/{orderID}/emailShipStatus": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "500": {
            "description": "Internal Server Errror"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "will send the visitor a shipping confirmation email"
      }
    },
    "/order/{orderID}/emailTrackingCode": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "carrier": {
                  "type": "string"
                },
                "tracking_number": {
                  "type": "string"
                },
                "tracking_url": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Errror"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "updates order with shipping tracking information and sends a shipping status email"
      }
    },
    "/orders": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "returns a list of existing purchase orders"
      }
    },
    "/orders/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "returns a list of purchase order attributes"
      }
    },
    "/orders/exportToCSV": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "orders": {
                  "description": "comma separated list of order IDs",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order",
          "csv"
        ],
        "description": "returns a list of orders in CSV format"
      }
    },
    "/orders/setStatus": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "order_id": {
                  "description": "comma separated list of order IDs",
                  "type": "string"
                },
                "status": {
                  "enum": [
                    "declined",
                    "new",
                    "pending",
                    "processed",
                    "completed",
                    "cancelled"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "order"
        ],
        "description": "will change orders to the state included in the status request variable"
      }
    },
    "/paypal/cancel": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PayerID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructRestRedirect"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "paypal"
        ],
        "description": "processes PayPal decline response"
      }
    },
    "/paypal/success": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "PayerID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructRestRedirect"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "paypal"
        ],
        "description": "processes PayPal receipt response"
      }
    },
    "/product": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProductModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ProductModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "creates a new product"
      }
    },
    "/product/{productID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "deletes existing product"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ProductModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "product"
        ],
        "description": "return specified product information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ProductModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ProductModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "creates a new product"
      }
    },
    "/product/{productID}/media/{mediaType}/{mediaName}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "removes media content from specified product"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "uploads and assigns media file send in request for a specified product"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaType",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "newMediaName": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "renames media file for a specified product"
      }
    },
    "/product/{productID}/related": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/ProductModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "product"
        ],
        "description": "returns related products list for a given product"
      }
    },
    "/product/{productID}/stock": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "options": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "product",
          "stock"
        ],
        "description": "returns available stock qty for particular product-options pair"
      }
    },
    "/products": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "limits rows returned in format \"limit=start,count\"",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/StructListItem"
                          },
                          {
                            "properties": {
                              "Images": {
                                "items": {
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "product"
        ],
        "description": "returns a list of available products"
      }
    },
    "/products/attribute": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "Attribute": {
                  "type": "string"
                },
                "Label": {
                  "type": "string"
                },
                "default": {
                  "type": "string"
                },
                "editors": {
                  "type": "string"
                },
                "group": {
                  "type": "string"
                },
                "layered": {
                  "type": "boolean"
                },
                "options": {
                  "type": "string"
                },
                "public": {
                  "type": "boolean"
                },
                "required": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "validators": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructAttributeInfo"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "creates a new custom attribute for a product model. time expensive: update all products with default value\n"
      }
    },
    "/products/attribute/{attribute}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "attribute",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "removes existing custom attribute of a product model"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "attribute",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "default": {
                  "type": "string"
                },
                "editors": {
                  "type": "string"
                },
                "group": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "layered": {
                  "type": "boolean"
                },
                "options": {
                  "type": "string"
                },
                "public": {
                  "type": "boolean"
                },
                "required": {
                  "type": "boolean"
                },
                "validators": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructAttributeInfo"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product"
        ],
        "description": "updates existing custom attribute of product model"
      }
    },
    "/products/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "product"
        ],
        "description": "returns a list of product attributes"
      }
    },
    "/proxy.html": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "xdomain"
        ],
        "description": "will enable the usage of xdomain instead of CORS for legacy browsers"
      }
    },
    "/ratedreview/{productID}/{stars}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "stars",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ReviewModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product",
          "review"
        ],
        "description": "creates a new review for a specified product"
      }
    },
    "/rating/{productID}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ReviewModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product",
          "review"
        ],
        "description": "returns rating info for a specified product"
      }
    },
    "/reporting/customer-activity": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "total_orders",
              "total_sales"
            ],
            "in": "query",
            "name": "sort",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "aggregate_items": {
                          "items": {
                            "$ref": "#/definitions/CustomerActivityItemHash"
                          },
                          "type": "array"
                        },
                        "meta": {
                          "properties": {
                            "count": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "perf_ms": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "reporting"
        ],
        "description": "customer activity"
      }
    },
    "/reporting/gift-cards": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "aggregate_items": {
                          "items": {
                            "properties": {
                              "amount": {
                                "type": "number"
                              },
                              "code": {
                                "type": "string"
                              },
                              "date": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "count": {
                          "type": "integer"
                        },
                        "perf_ms": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "reporting"
        ],
        "description": "gift cards"
      }
    },
    "/reporting/location-country": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "aggregate_items": {
                          "items": {
                            "$ref": "#/definitions/StatItemHash"
                          },
                          "type": "array"
                        },
                        "perf_ms": {
                          "type": "integer"
                        },
                        "total_sales": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "reporting"
        ],
        "description": "order locations"
      }
    },
    "/reporting/location-us": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "aggregate_items": {
                          "items": {
                            "$ref": "#/definitions/StatItemHash"
                          },
                          "type": "array"
                        },
                        "perf_ms": {
                          "type": "integer"
                        },
                        "total_sales": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "reporting"
        ],
        "description": "list aggregate sales by state for sales in the US"
      }
    },
    "/reporting/payment-method": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "aggregate_items": {
                          "items": {
                            "$ref": "#/definitions/StatItemHash"
                          },
                          "type": "array"
                        },
                        "perf_ms": {
                          "type": "integer"
                        },
                        "total_sales": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "reporting"
        ],
        "description": "payment method"
      }
    },
    "/reporting/product-performance": {
      "get": {
        "parameters": [
          {
            "format": "2006-01-02 15:04",
            "in": "query",
            "name": "start_date",
            "required": true,
            "type": "string"
          },
          {
            "format": "2006-01-02 15:04",
            "in": "query",
            "name": "end_date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "aggregate_items": {
                          "items": {
                            "$ref": "#/definitions/ProductPerfItemHash"
                          },
                          "type": "array"
                        },
                        "total_items": {
                          "type": "integer"
                        },
                        "total_orders": {
                          "type": "integer"
                        },
                        "total_sales": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "reporting"
        ],
        "description": "returns product performance information by date range"
      }
    },
    "/reporting/shipping-method": {
      "get": {
        "parameters": [
          {
            "format": "2006-01-02 15:04",
            "in": "query",
            "name": "start_date",
            "required": false,
            "type": "string"
          },
          {
            "format": "2006-01-02 15:04",
            "in": "query",
            "name": "end_date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "aggregate_items": {
                          "items": {
                            "$ref": "#/definitions/StatItemHash"
                          },
                          "type": "array"
                        },
                        "perf_ms": {
                          "type": "integer"
                        },
                        "total_sales": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "reporting"
        ],
        "description": "shipping method"
      }
    },
    "/review/{reviewID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "reviewID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product",
          "review"
        ],
        "description": "deletes existing review"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "reviewID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ReviewModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product",
          "review"
        ],
        "description": "returns an existing review for owner or admin"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "reviewID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ReviewModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/ReviewModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product",
          "review"
        ],
        "description": "updates an existing review"
      }
    },
    "/reviews": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "product_id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/ReviewModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "product",
          "review"
        ],
        "description": "returns a list of reviews for specified products"
      }
    },
    "/rts/bestsellers": {
      "get": {
        "parameters": [
          {
            "enum": [
              "yesterday",
              "week",
              "month"
            ],
            "in": "query",
            "name": "period",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "count": {
                            "type": "integer"
                          },
                          "image": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "pid": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "rts"
        ],
        "description": "returns information about bestsellers for some period"
      }
    },
    "/rts/conversion": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "addedToCart": {
                          "type": "integer"
                        },
                        "purchased": {
                          "type": "integer"
                        },
                        "setPayment": {
                          "type": "integer"
                        },
                        "totalVisitors": {
                          "type": "integer"
                        },
                        "visitCheckout": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "rts"
        ],
        "description": "returns site conversion information"
      }
    },
    "/rts/sales": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "orders": {
                          "properties": {
                            "monthToDate": {
                              "type": "integer"
                            },
                            "today": {
                              "type": "integer"
                            },
                            "week": {
                              "type": "integer"
                            },
                            "yesterday": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "sales": {
                          "properties": {
                            "monthToDate": {
                              "type": "number"
                            },
                            "today": {
                              "type": "number"
                            },
                            "week": {
                              "type": "number"
                            },
                            "yesterday": {
                              "type": "number"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "rts"
        ],
        "description": "returns information about sales in the recent period, taking into account time zone"
      }
    },
    "/rts/sales/detail/{from}/{to}": {
      "get": {
        "parameters": [
          {
            "format": "2006-01-02",
            "in": "path",
            "name": "from",
            "required": true,
            "type": "string"
          },
          {
            "format": "2006-01-02",
            "in": "path",
            "name": "to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "rts"
        ],
        "description": "returns site sales information for a specified period"
      }
    },
    "/rts/visit": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "path": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "rts"
        ],
        "description": "registers request for a statistics"
      }
    },
    "/rts/visits": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "total": {
                          "properties": {
                            "monthToDate": {
                              "type": "integer"
                            },
                            "today": {
                              "type": "integer"
                            },
                            "week": {
                              "type": "integer"
                            },
                            "yesterday": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        },
                        "unique": {
                          "properties": {
                            "monthToDate": {
                              "type": "integer"
                            },
                            "today": {
                              "type": "integer"
                            },
                            "week": {
                              "type": "integer"
                            },
                            "yesterday": {
                              "type": "integer"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "rts"
        ],
        "description": "returns site visit information for a specified local day"
      }
    },
    "/rts/visits/detail/{from}/{to}": {
      "get": {
        "parameters": [
          {
            "format": "2006-01-02",
            "in": "path",
            "name": "from",
            "required": true,
            "type": "string"
          },
          {
            "format": "2006-01-02",
            "in": "path",
            "name": "to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "items": {
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "rts"
        ],
        "description": "returns detailed site visit information for a specified period"
      }
    },
    "/saleprice": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SalePriceModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/SalePriceModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "saleprice"
        ],
        "description": "store new Sale Price"
      }
    },
    "/saleprice/{id}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "saleprice"
        ],
        "description": "deletes specified sale price"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/SalePriceModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "saleprice"
        ],
        "description": "store new Sale Price"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SalePriceModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/SalePriceModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "saleprice"
        ],
        "description": "updates sale price"
      }
    },
    "/saleprices": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "limits rows returned in format \"limit=start,count\"",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          },
          {
            "description": "put these separated by comma attributes of sale price to Extra item field",
            "in": "query",
            "name": "extra",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "saleprice"
        ],
        "description": "returns list of all registered sale price promotions scheduled."
      }
    },
    "/seo/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "seo"
        ],
        "description": "returns a list of seo item attributes"
      }
    },
    "/seo/canonical/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/SEOItemModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "seo"
        ],
        "description": "returns SEO item for a specified id"
      }
    },
    "/seo/item": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SEOItemModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/SEOItemModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "seo"
        ],
        "description": "creates a new SEO item"
      }
    },
    "/seo/item/{itemID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "itemID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "seo"
        ],
        "description": "deletes specified SEO item"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "itemID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/SEOItemModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/SEOItemModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "seo"
        ],
        "description": "updates existing SEO item"
      }
    },
    "/seo/items": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "limits rows returned in format \"limit=start,count\"",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "seo"
        ],
        "description": "returns a list registered SEO records"
      }
    },
    "/seo/sitemap": {
      "get": {
        "produces": [
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Processed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "seo"
        ],
        "description": "generates a new sitemap based on SEO records"
      }
    },
    "/seo/sitemap/sitemap.xml": {
      "get": {
        "produces": [
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "Processed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "seo"
        ],
        "description": "returns SEO records based sitemap (auto re-generating it if needed)"
      }
    },
    "/seo/url": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/SEOItemModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "seo"
        ],
        "description": "returns SEO item for a specified url"
      }
    },
    "/seo/url/{url}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "url",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/SEOItemModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "seo"
        ],
        "description": "returns SEO item for a specified url"
      }
    },
    "/shipstation": {
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "enum": [
              "export"
            ],
            "in": "query",
            "name": "action",
            "required": true,
            "type": "string"
          },
          {
            "description": "format '01/02/2006 15:04'",
            "in": "query",
            "name": "start_date",
            "required": true,
            "type": "string"
          },
          {
            "description": "format '01/02/2006 15:04'",
            "in": "query",
            "name": "end_date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed"
          }
        },
        "security": [
          {
            "BasicShipstation": []
          }
        ],
        "tags": [
          "shipstation"
        ],
        "description": "Handler for getting a list of orders. Should return any orders that were modified within the date range regardless of the order status.\n"
      },
      "post": {
        "produces": [
          "text/xml"
        ],
        "parameters": [
          {
            "description": "The value will always be \"shipnotify\" when sending shipping notifications.",
            "enum": [
              "shipnotify"
            ],
            "in": "query",
            "name": "action",
            "required": true,
            "type": "string"
          },
          {
            "description": "This is the order's unique identifier.",
            "in": "query",
            "name": "order_number",
            "required": true,
            "type": "string"
          },
          {
            "description": "USPS, UPS, FedEx, DHL, Other, DHLGlobalMail, UPSMI, BrokersWorldWide, FedExInternationalMailService, CanadaPost, FedExCanada, OnTrac, Newgistics, FirstMile, Globegistics, LoneStar, Asendia, RoyalMail, APC, AccessWorldwide, AustraliaPost, DHLCanada, IMEX\n",
            "in": "query",
            "name": "carrier",
            "required": true,
            "type": "string"
          },
          {
            "description": "This will be the name of the shipping service that was used to ship the order.",
            "in": "query",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "description": "This is the tracking number for the package.",
            "in": "query",
            "name": "tracking_number",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "BasicShipstation": []
          }
        ],
        "tags": [
          "shipstation"
        ],
        "description": "An endpoint for shipstation to hit that will update the order with some shipment tracking info and then send off an email update.\n"
      }
    },
    "/stock/{productID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "otpions": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "stock"
        ],
        "description": "deletes stock records for a product-options pair"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "stock"
        ],
        "description": "returns stock information for particular product"
      }
    },
    "/stock/{productID}/{qty}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "qty",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "otpions": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "stock"
        ],
        "description": "sets amount qty for a particular product-options pair"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "productID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "qty",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "otpions": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "stock"
        ],
        "description": "increases qty on particular product-options pair for a delta value - product id and delta should be specified in \"productID\" and \"qty\" arguments - negative delta will decrease amount\n"
      }
    },
    "/subscriptional/checkout": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "subscription"
        ],
        "description": "provide check is current checkout allows to create new subscription"
      }
    },
    "/subscriptions": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "type": "string"
          },
          {
            "description": "limits rows returned in format \"limit=start,count\"",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "subscription"
        ],
        "description": "returns a list of subscriptions for visitor"
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/SubscriptionModelHash"
                        },
                        {
                          "properties": {
                            "payment_method_name": {
                              "type": "string"
                            },
                            "shipping_method_name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "subscription"
        ],
        "description": "return specified subscription information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "subscription"
        ],
        "description": "allows to change status of subscription for visitor and for administrator"
      }
    },
    "/swatch/media": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "properties": {
                          "created_at": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "swatch"
        ],
        "description": "returns list of media files from media storage"
      },
      "post": {
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "swatch"
        ],
        "description": "uploads images to the media - media file should be provided in \"file\" field with full name\n"
      }
    },
    "/swatch/media/extention": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "swatch"
        ],
        "description": "returns default media extention. This value is necessary to select image by name \"swatchType-swatchValue.extention\" list returned from \"listAllSwatches\"."
      }
    },
    "/swatch/media/{mediaName}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "mediaName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "swatch"
        ],
        "description": "removes image from media"
      }
    },
    "/taxes/csv": {
      "get": {
        "produces": [
          "text.csv"
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "tax",
          "csv"
        ],
        "description": "returns csv file with currently used tax rates"
      },
      "post": {
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "tax",
          "csv"
        ],
        "description": "replaces currently used discount coupons with data from provided in csv file"
      }
    },
    "/trustpilot/products/summaries": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "trustpilot"
        ],
        "description": "Makes a request to Trustpilot api to obtain a list of reviews summaries for every product, caches the response.\n  - https://developers.trustpilot.com/product-reviews-api#Get product reviews summaries list\n"
      }
    },
    "/update/subscriptions": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "subscription"
        ],
        "description": "allows run and update info of all existing subscriptions.\n  - if id is provided in request it is used to filter category\n"
      }
    },
    "/visit": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponseWithResultObject"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "facebook_id": {
                          "type": "string"
                        },
                        "google_id": {
                          "type": "string"
                        },
                        "is_admin": {
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit"
        ],
        "description": "returns current visit related information."
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "visitorID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/VisitorModelHash"
                },
                {
                  "properties": {
                    "old_password": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponseWithResultObject"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/VisitorModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit"
        ],
        "description": "updates existing visitor.\n  - visitor id should be specified in \"visitorID\" argument\n  - visitor attributes should be specified in content\n"
      }
    },
    "/visit/address": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/AddressModelHash"
                },
                {
                  "properties": {
                    "visitor_id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponseWithResultObject"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AddressModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit"
        ],
        "description": "creates a new visitor address"
      }
    },
    "/visit/address/{addressID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "visit"
        ],
        "description": "deletes existing visitor address"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponseWithResultObject"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AddressModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit"
        ],
        "description": "returns visitor address information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponseWithResultObject"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AddressModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit"
        ],
        "description": "updates existing visitor address"
      }
    },
    "/visit/addresses": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "visitorID",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit"
        ],
        "description": "returns visitor address information\n  - if visitorID was specified - using this otherwise, taking current visitor\n"
      }
    },
    "/visit/login": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "makes login for a current visit"
      }
    },
    "/visit/login-facebook": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "access_token": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "makes login and/or registration via Facebook"
      }
    },
    "/visit/login-google": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "access_token": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "auth"
        ],
        "description": "associates the specified email address with a Google account"
      }
    },
    "/visit/logout": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "auth"
        ],
        "description": "makes logout for current visit"
      }
    },
    "/visit/order/{orderID}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "orderID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/OrderModelHash"
                        },
                        {
                          "properties": {
                            "items": {
                              "items": {
                                "$ref": "#/definitions/OrderItem"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "tags": [
          "visit",
          "order"
        ],
        "description": "returns current visitor order details for specified order."
      }
    },
    "/visit/orders": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "visit",
          "order"
        ],
        "description": "returns list of orders related to current visitor."
      }
    },
    "/visit/subscriptions": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/SubscriptionModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit",
          "subscription"
        ],
        "description": "returns a list of subscriptions for visitor."
      }
    },
    "/visit/subscriptions/{id}": {
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "visit",
          "subscription"
        ],
        "description": "allows to change status of subscription for visitor and for administrator"
      }
    },
    "/visit/tokens": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "visitorID",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit",
          "token"
        ],
        "description": "return a list of existing tokens for visitor\n  - if visitorID was specified - using this otherwise, taking current visitor\n"
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "cc": {
                  "type": "object"
                },
                "holder": {
                  "type": "string"
                },
                "payment_method": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/VisitorCardModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visit",
          "token"
        ],
        "description": "creates a request body for posting credit card info to payment system with 0 amount payment for obtaining token on this card and saving it for visitor\n"
      }
    },
    "/visit/tokens/default": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "tokenID": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "visit",
          "token"
        ],
        "description": "set default credit card token by provided token_id"
      }
    },
    "/visit/tokens/{tokenID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "tokenID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "visit",
          "token"
        ],
        "description": "deletes credit card token by provided token_id"
      }
    },
    "/visitor": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/VisitorModelHash"
                },
                {
                  "properties": {
                    "old_password": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/VisitorModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "creates a new visitor"
      }
    },
    "/visitor/{visitorID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "visitorID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "deletes existing visitor"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "visitorID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/VisitorModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "returns visitor information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "visitorID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/VisitorModelHash"
                },
                {
                  "properties": {
                    "old_password": {
                      "type": "string"
                    },
                    "password": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/VisitorModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visitor"
        ],
        "description": "updates existing visitor"
      }
    },
    "/visitor/{visitorID}/address": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "visitorID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddressModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/AddressModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor",
          "address"
        ],
        "description": "creates a new visitor address"
      }
    },
    "/visitor/{visitorID}/address/{addressID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "visitorID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "tags": [
          "visitor",
          "address"
        ],
        "description": "deletes existing visitor address"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "visitorID",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddressModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/AddressModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visitor",
          "address"
        ],
        "description": "updates existing visitor address"
      }
    },
    "/visitor/{visitorID}/addresses": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "visitorID",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "limits rows returned in format \"limit=start,count\"",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "tags": [
          "visitor",
          "address"
        ],
        "description": "returns visitor addresses list - if visitorID was specified - using this otherwise, taking current visitor"
      }
    },
    "/visitors": {
      "get": {
        "parameters": [
          {
            "enum": [
              "count"
            ],
            "in": "query",
            "name": "action",
            "required": false,
            "type": "string"
          },
          {
            "description": "limits rows returned in format \"limit=start,count\"",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructListItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "returns a list of existing visitors"
      }
    },
    "/visitors/address/{addressID}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor",
          "address"
        ],
        "description": "deletes existing visitor address"
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AddressModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor",
          "address"
        ],
        "description": "returns visitor address information"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "addressID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AddressModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/AddressModelHash"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor",
          "address"
        ],
        "description": "updates existing visitor address"
      }
    },
    "/visitors/addresses/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor",
          "address"
        ],
        "description": "returns a list of visitor address attributes"
      }
    },
    "/visitors/attribute": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "Attribute": {
                  "type": "string"
                },
                "Label": {
                  "type": "string"
                },
                "default": {
                  "type": "string"
                },
                "editors": {
                  "type": "string"
                },
                "group": {
                  "type": "string"
                },
                "layered": {
                  "type": "boolean"
                },
                "options": {
                  "type": "string"
                },
                "public": {
                  "type": "boolean"
                },
                "required": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                },
                "validators": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructAttributeInfo"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "creates a new custom attribute for a visitor model. time expensive: update all visitors with default value.\n"
      }
    },
    "/visitors/attribute/{attribute}": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "attribute",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "removes existing custom attribute of a visitor model\n"
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "attribute",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "default": {
                  "type": "string"
                },
                "editors": {
                  "type": "string"
                },
                "group": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "layered": {
                  "type": "boolean"
                },
                "options": {
                  "type": "string"
                },
                "public": {
                  "type": "boolean"
                },
                "required": {
                  "type": "boolean"
                },
                "validators": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructAttributeInfo"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "updates existing custom attribute of visitor model\n"
      }
    },
    "/visitors/attributes": {
      "get": {
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/StructAttributeInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "returns a list of visitor attributes"
      }
    },
    "/visitors/available": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "email": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "is email address is available"
      }
    },
    "/visitors/forgot-password/{email}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "changes and sends a new password to visitor e-mail"
      }
    },
    "/visitors/guests": {
      "get": {
        "parameters": [
          {
            "description": "limits rows returned in format \"limit=start,count\"",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "guests": {
                          "items": {
                            "properties": {
                              "customer_email": {
                                "type": "string"
                              },
                              "customer_name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "returns list of guests GROUP(ed) BY customer_email"
      }
    },
    "/visitors/invalidate/{email}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "invalidate visitor by email, sends a new verification key to email"
      }
    },
    "/visitors/mail": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "content": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "visitor_ids": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "$ref": "#/definitions/ApiResponseWithResultObject"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "sends email to specified visitors"
      }
    },
    "/visitors/register": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/VisitorModelHash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/definitions/VisitorModelHash"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "creates a new visitor, sends verification link to visitor email"
      }
    },
    "/visitors/reset-password": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "key": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "update visitor password by using verification key from email"
      }
    },
    "/visitors/validate/{key}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Processed",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/ApiResponse"
                },
                {
                  "properties": {
                    "result": {
                      "$ref": "#/definitions/StructRestRedirect"
                    }
                  },
                  "type": "object"
                }
              ],
              "type": "object"
            }
          }
        },
        "security": [
          {
            "OTTEMOSESSION": []
          }
        ],
        "tags": [
          "visitor"
        ],
        "description": "validates visitors by a key which sends after registration"
      }
    }
  },
  "definitions": {
    "AddressModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "address_line1": {
          "type": "string"
        },
        "address_line2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "visitor_id": {
          "type": "string"
        },
        "zip_code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApiResponse": {
      "properties": {
        "error": {
          "properties": {
            "code": {
              "type": "string"
            },
            "level": {
              "type": "integer"
            },
            "message": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "redirect": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApiResponseWithResultObject": {
      "allOf": [
        {
          "$ref": "#/definitions/ApiResponse"
        },
        {
          "properties": {
            "result": {
              "type": "object"
            }
          },
          "type": "object"
        }
      ]
    },
    "BlogPostModelHash": {
      "properties": {
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "_id": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "created_at": {
          "format": "date-time",
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "featured_image": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "published": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CategoryModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "product_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CmsBlockModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CmsPageModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "identifier": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CouponHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "code": {
          "type": "string"
        },
        "limits": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "percent": {
          "type": "number"
        },
        "since": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "times": {
          "type": "integer"
        },
        "until": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CronSchedule": {
      "properties": {
        "CronExpr": {
          "type": "string"
        },
        "Params": {
          "type": "object"
        },
        "Repeat": {
          "type": "boolean"
        },
        "TaskName": {
          "type": "string"
        },
        "Time": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "expr": {
          "type": "string"
        },
        "scheduler": {
          "type": "object"
        },
        "task": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CronScheduleHash": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "expr": {
          "type": "string"
        },
        "params": {
          "type": "object"
        },
        "repeat": {
          "type": "boolean"
        },
        "task": {
          "type": "string"
        },
        "time": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerActivityItemHash": {
      "properties": {
        "average_sales": {
          "type": "number"
        },
        "earliest_purchase": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "latest_purchase": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "total_orders": {
          "type": "integer"
        },
        "total_sales": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "OrderItem": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "Options": {
          "type": "object"
        },
        "OrderID": {
          "type": "string"
        },
        "Price": {
          "type": "number"
        },
        "ProductID": {
          "type": "string"
        },
        "Qty": {
          "type": "integer"
        },
        "ShortDescription": {
          "type": "string"
        },
        "Sku": {
          "type": "string"
        },
        "Weight": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "OrderModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "billing_address": {
          "$ref": "#/definitions/AddressModelHash"
        },
        "cart_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "custom_info": {
          "type": "object"
        },
        "customer_email": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "discount": {
          "type": "number"
        },
        "discounts": {
          "items": {
            "$ref": "#/definitions/StructDiscount"
          },
          "type": "array"
        },
        "grand_total": {
          "type": "number"
        },
        "increment_id": {
          "type": "string"
        },
        "notes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "payment_info": {
          "type": "object"
        },
        "payment_method": {
          "type": "string"
        },
        "session_id": {
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/AddressModelHash"
        },
        "shipping_amount": {
          "type": "number"
        },
        "shipping_info": {
          "type": "object"
        },
        "shipping_method": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "subtotal": {
          "type": "number"
        },
        "tax_amount": {
          "type": "number"
        },
        "taxes": {
          "items": {
            "$ref": "#/definitions/StructTaxRate"
          },
          "type": "array"
        },
        "updated_at": {
          "type": "string"
        },
        "visitor_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductModelHash": {
      "additionalProperties": {
        "type": "object"
      },
      "properties": {
        "_id": {
          "type": "string"
        },
        "default_image": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "object"
        },
        "price": {
          "type": "number"
        },
        "related_pids": {
          "type": "string"
        },
        "short_description": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "visible": {
          "type": "boolean"
        },
        "weight": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProductPerfItemHash": {
      "properties": {
        "gross_sales": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "units_sold": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReviewModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "approved": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "rating": {
          "type": "string"
        },
        "review": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "visitor_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SEOItemModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "meta_description": {
          "type": "string"
        },
        "meta_keywords": {
          "type": "string"
        },
        "rewrite": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SalePriceModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "end_datetime": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "start_datetime": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StatItemHash": {
      "properties": {
        "avg_sales": {
          "type": "number"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "total_orders": {
          "type": "integer"
        },
        "total_sales": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "StructAttributeInfo": {
      "properties": {
        "Attribute": {
          "type": "string"
        },
        "Collection": {
          "type": "string"
        },
        "Default": {
          "type": "string"
        },
        "Editors": {
          "type": "string"
        },
        "Group": {
          "type": "string"
        },
        "IsLayered": {
          "type": "boolean"
        },
        "IsPublic": {
          "type": "boolean"
        },
        "IsRequired": {
          "type": "boolean"
        },
        "IsStatic": {
          "type": "boolean"
        },
        "Label": {
          "type": "string"
        },
        "Model": {
          "type": "string"
        },
        "Options": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Validators": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StructConfigItem": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "Editor": {
          "type": "string"
        },
        "Image": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "Options": {
          "type": "object"
        },
        "Path": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "StructDiscount": {
      "properties": {
        "Amount": {
          "type": "number"
        },
        "Code": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StructListItem": {
      "properties": {
        "Desc": {
          "type": "string"
        },
        "Extra": {
          "type": "object"
        },
        "ID": {
          "type": "string"
        },
        "Image": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StructPriceAdjustment": {
      "properties": {
        "Amount": {
          "type": "number"
        },
        "Code": {
          "type": "string"
        },
        "IsPercent": {
          "type": "boolean"
        },
        "Labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Name": {
          "type": "string"
        },
        "PerItem": {
          "type": "object"
        },
        "Priority": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "StructRestRedirect": {
      "properties": {
        "DoRedirect": {
          "type": "boolean"
        },
        "Location": {
          "type": "string"
        },
        "Result": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "StructShippingRate": {
      "properties": {
        "Code": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Price": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "StructSubscriptionItemHash": {
      "properties": {
        "name": {
          "type": "string"
        },
        "options": {
          "type": "object"
        },
        "price": {
          "type": "number"
        },
        "product_id": {
          "type": "string"
        },
        "qty": {
          "type": "integer"
        },
        "sku": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StructTaxRate": {
      "properties": {
        "Amount": {
          "type": "number"
        },
        "Code": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SubscriptionModelHash": {
      "properties": {
        "info": {
          "type": "object"
        },
        "_id": {
          "type": "string"
        },
        "action_date": {
          "type": "string"
        },
        "billing_address": {
          "type": "object"
        },
        "created_at": {
          "type": "string"
        },
        "customer_email": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/StructSubscriptionItemHash"
          },
          "type": "array"
        },
        "last_submit": {
          "type": "string"
        },
        "order_id": {
          "type": "string"
        },
        "payment_instrument": {
          "type": "object"
        },
        "period": {
          "type": "integer"
        },
        "shipping_address": {
          "type": "object"
        },
        "shipping_method": {
          "type": "string"
        },
        "shipping_rate": {
          "$ref": "#/definitions/StructShippingRate"
        },
        "status": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "visitor_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "VisitorCardModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "expiration_date": {
          "type": "string"
        },
        "holder": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "payment": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "token_updated": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "visitor_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "VisitorModelHash": {
      "properties": {
        "_id": {
          "type": "string"
        },
        "billing_address": {
          "$ref": "#/definitions/AddressModelHash"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "is_admin": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/AddressModelHash"
        },
        "token": {
          "$ref": "#/definitions/VisitorCardModelHash"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "BasicShipstation": {
      "type": "basic"
    },
    "OTTEMOSESSION": {
      "in": "header",
      "name": "OTTEMOSESSION",
      "type": "apiKey"
    }
  },
  "externalDocs": {
    "description": "Find out more about Ottemo",
    "url": "http://ottemo.io"
  }
}
